#!/bin/sh
set -e

url='https://lambdalabs.com'

dir="$HOME/.local/share/lambda/orders"
cookies="$dir/cookies"

mkdir -p "$(dirname $cookies)"
touch $cookies

usage() {
	cat 1>&2 <<- EOF
	$0 login <username> <password>
	$0 search word[ word[ ...]]]
	EOF
	exit 1
}

action() {
	sed -En "/form/ s/.*action=\"([^\"]*)\".*/\1/p" $*
}

csrf() {
	sed -En "/name='csrfmiddlewaretoken'/ s/.*value='([^']*)'.*/\1/p" $*
}

die() {
	printf "%s: %s\n" "$0" "$@" 2>&1
	exit 1
}

login() {
	# Visit site once to extract CSRF and form "action" tag
	page=$(mktemp)
	curl --cookie-jar "$cookies" \
		-L "$url/tools/orders" \
		-o "$page" 2>/dev/null

	action=$(action $page)
	csrf=$(csrf $page)
	failure="Please enter the correct username and password for a staff account. Note that both fields may be case-sensitive." 

	curl --cookie-jar "$cookies" \
		-H "cookie: csrftoken=$csrf" \
		-H 'referer: https://lambdalabs.com/e7f83f0e74ab48fd99743be3de4c527b/admin/login/?next=/tools/orders' \
		--data-urlencode "username=$1" \
		--data-urlencode "password=$2" \
		--data "csrfmiddlewaretoken=$csrf" \
		-L "$url$action" -f -v > $page 2>/dev/null
	
	if [ "$?" -ne 0 ] || grep -qF "$failure" "$page"; then
		die "failed during log in"
	fi

	return 0
}

search() {
	if [ ! -f $cookies ]; then
		cat 1>&2 <<- EOF
		$cookies file doesn't exist.
		Please log in via `$0 login`
		EOF

		exit 1
	fi

	curl --data-urlencode "search=$@" \
		--cookie "$cookies" \
		-G "$url/api/orders" -f 2>/dev/null
}

download_with_cookies() {
	curl -f --cookie "$cookies" \
		-G "$1" -o - 2> /dev/null
}

# With cache
download() {
	out_dir="$dir/$1"

	if [ ! -d $out_dir ]; then
		mkdir -p "$out_dir"
	fi

	out_file="$out_dir/$(basename $2)"

	[ -f $out_file ] || download_with_cookies "$2" > "$out_file" || {
		echo "Failed to download $(basename "$out_file")" 1>&2;
		rm -f "$out_file";
		return 1;
	}

	echo $out_file
}

# Downloads order PDFs to /tmp/<name>.pdf
pdf_dl() {
	tmp=$(mktemp -d)
	for path in $(search $@ | jq -r '.data[].pdf_url' | tr -d \"); do
		download 'invoices' "$url$path"
	done
}

# Downloads buildsheet PDFs to /tmp/<name>.pdf
build_dl() {
	tmp=$(mktemp -d)
	for path in $(search $@ | jq -r '.data[].build_sheet_url' | tr -d \"); do
		download 'build_sheets' "$url$path"
	done
}

# Put each order in temp file & echo temp file name
json() {
	temp="$(mktemp -d)"
	search $@ | tee "$temp/json" | jq -r '.data[].id' > "$temp/ids"
	for id in $(cat $temp/ids); do
		jq -r ".data[] | select(.id==\"$id\")" "$temp/json" > "$temp/$id"
		echo "$temp/$id"
	done
}

shipping() {
	s='.ship_to_address'
	orders json aramco  | xargs cat | jq -r " $s.name, $s.line_1, $s.line_2, $s.line_3, \"\($s.city), \($s.state) \($s.zipcode)\", .ship_to_email, .ship_to_phone"
}


main() {
	case $1 in
		login)
			shift
			login "$1" "$2"
			;;
		search)
			shift
			search "$@"
			;;
		pdf)
			shift
			pdf_dl "$@"
			;;
		build)
			shift
			build_dl "$@"
			;;
		json)
			shift
			json "$@"
			;;
		ship)
			shift
			shipping "$@"
			;;
		*)
			usage
			exit 1
			;;
	esac
}

main $@
